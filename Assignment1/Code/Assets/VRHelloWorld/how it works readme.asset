%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 31d282ecdff9a0b4f82212582a8bc7c8, type: 3}
  m_Name: how it works readme
  m_EditorClassIdentifier: 
  icon: {fileID: 10912, guid: 0000000000000000f000000000000000, type: 0}
  title: How it works
  sections:
  - heading: 
    text: 'The basic idea is that there are two game objects, hostGO and clientGO,
      that are controlled by the host device and the client-only device respectively. '
    linkText: 
    url: 
  - heading: 
    text: The hostGO is created on the host device and its position and orientation
      are updated using the WASD keys. The hostGO also has a NetworkTransform component
      attached to it that sends the position and orientation updates to the client
      device - meaning that a copy of the hostGO appears on the client device and
      its position and orientation mimic that of the original version on the host
      device.
    linkText: 
    url: 
  - heading: 
    text: On the client device (run on the mobile device), clientGO is created and
      controlled. The way this happens is twofold. First the orientation of a camera
      named VRCamera is controlled by the mobile devices movement. This camera also
      has a component attached to it that can render the image in a format that Google
      Cardboard head sets can use for displaying depth vision. Both the camera control
      and rendering are handled by the Google Cardboard SDK. The position of the
      camera, however, is not controlled by the SDK. Instead, the VRCamera is parented
      to the hostGO clone running on the client device. This means that the hostGO
      on the host device's position and orientation are duplicated onto the client
      device and the VRCamera is attached to the hostGO as well, where Vuforia controls
      it's orientation. Together, these two allow the hostGO and VRCamera to move
      and function together as a single unit.
    linkText: 
    url: 
  - heading: 
    text: The synchronisation of movement of the hostGO is achieved using the Mirror
      SDK for network communication, which is why the host device and the client
      device need to be connected to one another.
    linkText: 
    url: 
  - heading: 
    text: If you are wanting to include physics in the simulation, then you need
      to allow the HOST to control ALL the physics interactions. i.e. the CLIENT
      will do nothing to detect collisions, etc. it will merely track the user's
      head and display what they see, so you could switch off physics on the CLIENT.
      The collision detection and handling happens on the HOST.
    linkText: 
    url: 
  loadedLayout: 0
